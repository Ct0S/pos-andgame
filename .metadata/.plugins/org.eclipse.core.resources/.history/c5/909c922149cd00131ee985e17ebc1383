package com.unopar.spaceboy.character;

import java.util.Random;

import org.andengine.engine.Engine;
import org.andengine.engine.handler.physics.PhysicsHandler;
import org.andengine.entity.sprite.AnimatedSprite;
import org.andengine.opengl.texture.region.ITiledTextureRegion;

import com.unopar.spaceboy.base.XApplication;

public abstract class Enemy extends AnimatedSprite {
	private PhysicsHandler mPhysicalHandler;
	private int mSpeed;
	private Random mRandom = new Random(1);
	private float mLimiteX;
	private float mLimiteY;

	public Enemy(float pX, float pY, 
			ITiledTextureRegion textureRegion, Engine engine) {
		super(pX, pY, textureRegion, engine.getVertexBufferObjectManager());
		
		mPhysicalHandler = new PhysicsHandler(this);
		registerUpdateHandler(mPhysicalHandler);
		
		mSpeed = getDefaultSpeed();
		
		mLimiteY = XApplication.getInstance().getScreenHeight() - 
				textureRegion.getHeight();
		
		resetPosition();
	}

	private void resetPosition() {
		float pX = mLimiteX - getTextureRegion().getWidth();
		float pY = mRandom.nextFloat() * mLimiteY;
		float velocityX = -(mRandom.nextInt(2) + 1 * mSpeed);
		float velocityY = mRandom.nextBoolean()
				? (mRandom.nextInt(2) + 1 * mSpeed)
				: -(mRandom.nextInt(2) + 1 * mSpeed);
				
		setPosition(pX, pY);
		mPhysicalHandler.setVelocity(velocityX, velocityY);
	}
	
	@Override
	protected void onManagedUpdate(float pSecondsElapsed) {
		super.onManagedUpdate(pSecondsElapsed);
		
		if(mX + getTextureRegion().getWidth() < 0) {
			resetPosition();
		} else {
			
		}
	}

	protected abstract int getDefaultSpeed();

}
